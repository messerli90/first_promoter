<?php

namespace Messerli90\FirstPromoter;

use Exception;

class Tracking extends FirstPromoter
{
    /**
     * With this call you can track the referral signs-ups server-side.
     * This is not for tracking the actual sales and commissions.
     *
     * Sign-ups are tracked as leads in FirstPromoter so when a person
     * referred by the promoter/affiliate signs up, a new lead should be
     * added inside FirstPromoter (you can see them inside the "Leads" section).
     *
     * The recommended way to do this is to grab the _fprom_track cookie value
     * (which keeps the tracking id and referral identification) on your server
     * and send it along with the sign-up data through the tid parameter.
     *
     * @param       $wid
     * @param       $email
     * @param array $options
     *
     * @return object
     * @throws Exception
     *
     */
    public static function trackSignUp($wid, $email, array $options = [])
    {
        if ( empty($wid) || empty($email) ) {
            throw new Exception('Integration ID and Email are required.');
        }

        if ( empty($data['tid']) && empty($data['ref_id']) ) {
            throw new Exception('Either Visitor Tracking ID or Referral ID are required.');
        }

        $options = array_merge([
            'wid'           => $wid,
            'email'         => $email,
        ], $options);

        return self::request('POST', 'track/signup', $options);
    }

    /**
     * Track sales and generate commissions
     *
     * @param       $email
     * @param       $event_id
     * @param       $amount "Amount in cents"
     * @param array $options
     *
     * @return object
     * @throws Exception
     *
     */
    public static function trackSale($email, $event_id, $amount, array $options = [])
    {
        if (empty($event_id) || empty($email) || empty($amount)) {
            throw new Exception('Event ID, Email, and Amount are required.');
        }

        $options = array_merge([
            'email'         => $email,
            'event_id'      => $event_id,
            'amount'        => $amount,
        ], $options);

        return self::request('POST', 'track/sale', $options);
    }

    /**
     * Refund call is similar with the sale call. It works the same way, just that it will produce negative commissions.
     *
     * @param       $email
     * @param       $event_id
     * @param       $amount
     * @param array $options
     *
     * @return object
     * @throws \Exception
     */
    public static function trackRefund($email, $event_id, $amount, array $options = [])
    {
        if (empty($event_id) || empty($email) || empty($amount)) {
            throw new Exception('Event ID, Email, and Amount are required.');
        }

        $options = array_merge([
            'email'         => $email,
            'event_id'      => $event_id,
            'amount'        => $amount,
        ], $options);

        return self::request('POST', 'track/refund', $options);
    }

    /**
     * This call will mark the customer as cancelled and will decrease the MRR generated by him/her
     *
     * @param      $email
     * @param null $uid
     * @param array $options
     *
     * @return object
     * @throws \Exception
     */
    public static function trackCancellation($email, $uid = null, array $options = [])
    {
        if (empty($email)) {
            throw new Exception('Email is required.');
        }

        $options = array_merge([
            'email'     => $email,
            'uid'       => $uid
        ], $options);

        return self::request('POST', 'track/cancellation', $options);
    }

}
